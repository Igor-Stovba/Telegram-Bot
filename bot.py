import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests
import config
import json
import random
import os
import datetime
from quiz import QuizManager
from database import TaskManager, ChatManager
from apscheduler.schedulers.background import BackgroundScheduler

# For prometheus + Grafana
from metrics import start_metrics_server, increment_command_metric
import threading

bot = telebot.TeleBot(config.TELEGRAM_BOT_TOKEN)
quiz_manager = QuizManager()
task_manager = TaskManager() 
chat_manager = ChatManager()
scheduler = BackgroundScheduler()
scheduler.start()  

# Block with async functions ------------------------------------------

def send_psychology_content():
    chat_ids = chat_manager.get_all_chat_ids() 
    with open("data/messages.json", "r", encoding="utf-8") as f:
        messages = json.load(f)

    photos = os.listdir("data/photos")
    message = random.choice(messages)
    photo_path = os.path.join("data/photos", random.choice(photos))

    for chat_id in chat_ids:
        with open(photo_path, "rb") as photo:
            bot.send_photo(chat_id, photo, caption=message)

def send_notification_task():
    # Checks whether we need to send notification
    users = task_manager.get_all_users()
    for user_id in users:
        print("user_id", user_id)
        tasks = task_manager.get_tasks(user_id)
        for task in tasks:
            print("task_id", task['description'])
            if task['notify'] and not task['completed']:
                deadline = datetime.datetime.strptime(task['deadline'], "%Y-%m-%d")
                now = datetime.datetime.now()
                if 0 <= abs((deadline - now).days) <= 1:
                    bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ '{task['description']}' –±–ª–∏–∑–∫–∞ –∫ –¥–µ–¥–ª–∞–π–Ω—É ({task['deadline']})!")
                    task_manager.disable_notification(task['id']) 

# End of block with async functions --------------------------------------------

scheduler.add_job(send_psychology_content, 'interval', seconds=20)
scheduler.add_job(send_notification_task, 'interval', seconds=10)

@bot.message_handler(commands=["start"])
def start_handler(message):
    increment_command_metric('start')
    chat_manager.add_chat(message.chat.id)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ 'TEST' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")

@bot.message_handler(func=lambda message: message.text.strip().upper() == "TEST")
def start_quiz(message):
    increment_command_metric('TEST')
    chat_manager.add_chat(message.chat.id)

    user_id = message.from_user.id
    quiz_manager.start_quiz(user_id)
    bot.send_message(message.chat.id, "1 - –ù–µ—Ç, 2 - –°–∫–æ—Ä–µ–µ –Ω–µ—Ç, 3 - –°–∫–æ—Ä–µ–µ –¥–∞, 4 - –î–∞")
    send_next_question(message)

def send_next_question(message):
    user_id = message.from_user.id
    question_data = quiz_manager.get_next_question(user_id)

    if question_data:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = [KeyboardButton(str(i+1)) for i in range(4)]
        markup.add(*buttons)

        bot.send_message(message.chat.id, question_data["question"], reply_markup=markup)
    else:
        rt, lt = quiz_manager.get_final_result(user_id)
        bot.send_message(message.chat.id, "–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        bot.send_message(message.chat.id, f"–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å: {rt}")
        bot.send_message(message.chat.id, f"–õ–∏—á–Ω–æ—Å—Ç–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å: {lt}")
        bot.send_message(message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")


@bot.message_handler(func=lambda message: message.text in ["1", "2", "3", "4"])
def handle_answer(message):
    user_id = message.from_user.id
    quiz_manager.process_answer(user_id, message.text)

    is_end = quiz_manager.is_end_of_test(user_id)
    if is_end is None:
        bot.send_message(message.chat.id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {quiz_manager.get_final_result(user_id)}")
    else:
        send_next_question(message)

# this function is for information

@bot.message_handler(commands=["info"])
def print_info(message):
    info_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "TEST - –ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n"
        "/tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
        "/addtask - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –µ—ë id\n"
        "/done - –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é'"
    )
    bot.send_message(message.chat.id, info_text)


# –õ–æ–≥–∏–∫–∞ –ø–æ CRUD task

@bot.message_handler(commands=["addtask"])
def add_task_handler(message):
    increment_command_metric('addtask')

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, get_task_description)

def get_task_description(message):
    user_id = message.from_user.id
    description = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    bot.register_next_step_handler(message, lambda msg: get_task_deadline(msg, user_id, description))

def get_task_deadline(message, user_id, description):
    deadline = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–í–∞–∂–Ω–æ", "–ù–µ –≤–∞–∂–Ω–æ")
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –≤–∞–∂–Ω–∞—è?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: get_task_importance(msg, user_id, description, deadline))

def get_task_importance(message, user_id, description, deadline):
    important = message.text == "–í–∞–∂–Ω–æ"
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–°—Ä–æ—á–Ω–æ", "–ù–µ —Å—Ä–æ—á–Ω–æ")
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å—Ä–æ—á–Ω–∞—è?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: get_task_urgency(msg, user_id, description, deadline, important))

def get_task_urgency(message, user_id, description, deadline, important):
    urgent = message.text == "–°—Ä–æ—á–Ω–æ"
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: save_task(msg, user_id, description, deadline, important, urgent))

def save_task(message, user_id, description, deadline, important, urgent):
    notify = message.text == "–î–∞"
    task_manager.add_task(user_id, description, deadline, important, urgent, notify)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@bot.message_handler(commands=["tasks"])
def list_tasks_handler(message):
    increment_command_metric('tasks')

    user_id = message.from_user.id
    tasks = task_manager.get_tasks(user_id)
    if not tasks:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        for task in tasks:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task["completed"] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            bot.send_message(message.chat.id, f"{task['id']}: {task['description']}\n–î–µ–¥–ª–∞–π–Ω: {task['deadline']}\n{status}")

@bot.message_handler(commands=["done"])
def complete_task_handler(message):
    increment_command_metric('done')

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:")
    bot.register_next_step_handler(message, mark_task_completed)

def mark_task_completed(message):
    try:
        task_id = int(message.text)
        task_manager.mark_task_completed(task_id)
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

@bot.message_handler(commands=["delete"])
def delete_task_handler(message):
    increment_command_metric('delete')

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, delete_task)

def delete_task(message):
    try:
        task_id = int(message.text)
        task_manager.delete_task(task_id)
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # chat_manager.add_chat(message.chat.id)
    # this method is for AI Agent
    user_input = message.text
    bot.send_chat_action(message.chat.id, "typing")
    response_text = get_gpt_response(user_input)
    bot.send_message(message.chat.id, response_text)

def get_gpt_response(prompt: str) -> str:
    increment_command_metric('Yandex GPT response')

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {config.YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    messages = [
        {"role": "system", "text": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π –∏ –º–æ—Ä–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–µ–º—ã, –æ—Ç–≤–µ—á–∞–π: '–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ.'"},
        {"role": "user", "text": prompt}
    ]
    data = {
        "modelUri": config.MODEL_URI,
        "messages": messages,
        "temperature": 0.7,
        "maxTokens": 500,
        "topP": 1
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT
    response = requests.post(url, json=data, headers=headers)
    print(f"Status code: {response.status_code}")
    if response.status_code == 200:
        try:
            result = response.json()
            if "result" in result and "alternatives" in result["result"]:
                return result["result"]["alternatives"][0]["message"]["text"]
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç Yandex GPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞."
        except Exception as e:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT."
    else:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex GPT üòî"

if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ telegram exporter
    threading.Thread(target=start_metrics_server, daemon=True).start()

    bot.polling(none_stop=True)
